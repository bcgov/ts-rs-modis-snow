# names(zone_no) = c("x","y","sig")
ggplot() +
geom_sf(data = sig, aes(fill = estimate)) +
geom_sf(data = not, fill = "grey") +
# geom_point(data = zone_no, aes(x, y)) +
# geom_text_repel(data = zone_no,aes(x = x, y = y, label = no), size = 2) +
scale_fill_gradientn(colors=colors,
values=rescale(c(min,0,max)),
limits=c(min,max)) +
guides(fill = guide_colourbar(barwidth = 20, barheight = 1, direction = "horizontal", title.position = "top", frame.colour = "black", ticks.colour = "black")) +
theme_few(base_size = 15) +
theme(axis.text = element_blank(), axis.title = element_blank(), axis.ticks = element_blank(), aspect.ratio = 1, panel.grid = element_line(linetype = 3, color = "light gray"), legend.position = "bottom", legend.title.align = 0.5)}
# mod_lm_zone_year_mean
zone_plot(mod_lm_zone_year_mean) +
facet_grid(tel~measurement, labeller = labeller(measurement = label_parsed))   +
labs(title = "mod_lm_zone_year_mean", x = "", y = "", fill = expression(paste("Trend (d ?",C^-1,")", sep = "")))
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "mod_lm_zone_year_mean_", zone_exp, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 12, height = 12, device = "pdf")
# mod_lm_zone_seas_mean
zone_plot(mod_lm_zone_seas_mean) +
facet_grid(tel+season~measurement, labeller = labeller(measurement = label_parsed))   +
labs(title = "mod_lm_zone_seas_mean", x = "", y = "", fill = expression(paste("Trend (d ?",C^-1,")", sep = "")))
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "mod_lm_zone_seas_mean_", zone_exp, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 12, height = 18, device = "pdf")
# mod_cor_zone_year_mean
zone_plot(mod_cor_zone_year_mean) +
facet_grid(tel~measurement, labeller = labeller(measurement = label_parsed))   +
labs(title = "mod_cor_zone_year_mean", x = "", y = "", fill = "Spearman Correlation Coefficient")
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "mod_cor_zone_year_mean_", zone_exp, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 12, height = 12, device = "pdf")
# mod_cor_zone_seas_mean
zone_plot(mod_cor_zone_seas_mean) +
facet_grid(tel+season~measurement, labeller = labeller(measurement = label_parsed))   +
labs(title = "mod_cor_zone_seas_mean", x = "", y = "", fill = "Spearman Correlation Coefficient")
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "mod_cor_zone_seas_mean_", zone_exp, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 12, height = 18, device = "pdf")
#### 8: PLOT MOST IMPORTANT TEL FROM ANNUAL DATA ####
# From COR
most_imp_year_cor = mod_cor_zone_year_mean %>%
mutate(sig = p.value <= 0.05) %>%
group_by_(.dots = c(zone_name, "measurement")) %>%
filter(abs(estimate) == max(abs(estimate)))
ggplot() +
geom_sf(data = filter(merge(zones, most_imp_year_cor,by=zone_name), sig == T), aes(fill = tel)) +
geom_sf(data = filter(merge(zones, most_imp_year_cor,by=zone_name), sig == F), fill = "grey") +
facet_grid(~measurement, labeller = labeller(measurement = label_parsed)) +
theme_few(base_size = 15) +
theme(axis.text = element_blank(), axis.title = element_blank(), axis.ticks = element_blank(), aspect.ratio = 1, panel.grid = element_line(linetype = 3, color = "light gray")) +
labs(fill = "Season", title = "most_imp_year_cor")
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "most_imp_year_cor_", zone_exp, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 12, height = 12, device = "pdf")
# PLOT MOST IMPORTANT SEASON FROM SEASONAL DATA
# From COR
most_imp_seas_cor = mod_cor_zone_seas_mean %>%
mutate(sig = p.value <= 0.05) %>%
group_by_(.dots = c(zone_name, "measurement", "tel")) %>%
filter(abs(estimate) == max(abs(estimate)))
ggplot() +
geom_sf(data = filter(merge(zones,most_imp_seas_cor,by=zone_name), sig == T), aes(fill = season)) +
geom_sf(data = filter(merge(zones,most_imp_seas_cor,by=zone_name), sig == F), fill = "grey") +
facet_grid(tel~measurement, labeller = labeller(measurement = label_parsed)) +
theme_few(base_size = 15) +
theme(axis.text = element_blank(), axis.title = element_blank(), axis.ticks = element_blank(), aspect.ratio = 1, panel.grid = element_line(linetype = 3, color = "light gray")) +
labs(fill = "Season", title = "most_imp_seas_cor")
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "most_imp_seas_cor_", zone_exp, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 12, height = 12, device = "pdf")
# Copyright 2019 Province of British Columbia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
#### 0: HEADER ####
# CLEAR ENVIRONMENT
rm(list=ls(all=TRUE))
# SET WD LAPTOP vs WORK MACHINE
# setwd("C:/Users/bevington/Dropbox/FLNRO_p1/Research_Cryosphere/Project_Snow/Paper_2018_snow_modis")
setwd("G:/Dropbox/FLNRO_p1/Research_Cryosphere/Project_Snow/Paper_2018_snow_modis")
#### 1: LOAD LIBRARIES ####
# DATA MANUPULATION LIBRARIES
library(reshape2);
library(broom);
library(tidyverse);
library(lubridate)
library(lme4)
library(Hmisc)
library(data.table)
library(doBy)
# LOAD SPATIAL TOOLS
library(sf);
library(sp)
library(spdep)
library(bcmaps);
library(viridis)
# LOAD GGPLOT TOOLS
library(ggrepel)
library(ggExtra)
library(ggpubr)
library(GGally)
library(ggmap);
library(ggpmisc);
library(RColorBrewer)
library(ggthemes);
library(scales);
library(hexbin);
library(gridExtra);
#### 2: IMPORT  ####
# READ GOOGLE EARTH ENGINE RANDOM SAMPLE OUTPUT
# df = tibble::as_tibble(read.csv("3_Modis_Output/Loess_Output/20190102/MODIS_Samp_25_2_a_20k_final.csv", stringsAsFactors = F))
df = tibble::as_tibble(read.csv("3_Modis_Output/Loess_Output/20190129/MODIS_Samp_s35_e10_b2_merged_100k.csv", stringsAsFactors = F))
# IMPORT TELECONNECTION DATA
tel = as_tibble(read.csv("0_Data_ONI_PDO/original_TEL_events.csv"))
#### 3: DEFINE FUNCTIONS ####
# LINEAR MODEL
# Run Linear Model and LOOP n times with random adjustment, summarise mean slope difference
lm_iter = function(raw_df, groups, Y, X, textName)
{
# Run linear model on raw data
lm_raw = raw_df %>%
dplyr::group_by_(.dots = groups) %>%
do(broom::tidy(lm(paste(Y,'~',X), data = ., na.action = na.omit))) %>%
dplyr::filter(term != "(Intercept)")
# Loop the same model n times for error estimation
for(i in 1:n_iterations)
{
print(i)
# Create list of offsets the length of Y
offset = rnorm(length(raw_df[[Y]]), 0 , 5)
# Adjust Y by offest
raw_df$adj = raw_df[[Y]] + offset
# Run linear model for adjusted days
lm_adj = raw_df %>%
dplyr::group_by_(.dots = groups) %>%
do(broom::tidy(lm(paste("adj",'~',X), data = ., na.action = na.omit))) %>%
dplyr::filter(term != "(Intercept)")
# Collector: Join raw linear model to all adjusted models
lm_raw   = full_join(
x      = lm_raw,
y      = lm_adj %>% dplyr::select(-statistic, -p.value, -std.error),
by     = c(groups, "term"),
suffix = c("",paste("_",as.character(i),sep="")))
}
# Summarise iterated linear models as
lm_summary = lm_raw %>%
gather(iteration, estimate_n, contains("estimate_")) %>%
dplyr::group_by_(.dots = c(groups, "estimate", "p.value")) %>%
dplyr::summarise(est_iter_min  = min(estimate_n),
est_iter_q25  = quantile(estimate_n, .25),
est_iter_mean = mean(estimate_n),
est_iter_q75  = quantile(estimate_n, .75),
est_iter_max  = max(estimate_n)) %>%
dplyr::mutate(error_minus = abs(estimate-est_iter_q25),
error_plus = abs(estimate-est_iter_q75),
error_mean = mean(error_minus, error_plus)) %>%
dplyr::select(
-est_iter_min,
-est_iter_q25,
-est_iter_mean,
-est_iter_q75,
-est_iter_max,
-error_minus,
-error_plus)
filename = paste("5_Draft/Figures/", textName, "_", zone_exp, "_", n, "_", n_iterations, "_", format(x = now(), format = "%Y%m%d%H%M%S"), "_", Y, "_", X,".csv", sep = "")
write.csv(x = lm_summary, file = filename)
return(lm_summary)
}
# SPEARMAN CORRELATION
# Run Spearman Correlation and LOOP n times with random adjustment, summarise mean coefficient difference
cor_iter = function(raw_df, groups, Y, X, textName)
{
# Run linear model on raw data
cor_raw = raw_df %>%
dplyr::group_by_(.dots = groups) %>%
dplyr::select(X, Y) %>%
dplyr::rename(X = X, Y = Y) %>%
dplyr::summarise(estimate = cor.test(Y, X, method = "spearman", exact=FALSE)$estimate,
p.value = cor.test(Y, X, method = "spearman", exact=FALSE)$p.value)
# Loop the same model n times for error estimation
for(i in 1:n_iterations)
{
print(i)
# Create list of offsets the length of Y
offset = rnorm(length(raw_df[[Y]]), 0 , 5)
# Adjust Y by offest
raw_df$adj = raw_df[[Y]] + offset
# Run linear model for adjusted days
cor_adj = raw_df %>%
dplyr::group_by_(.dots = groups) %>%
dplyr::select(X, adj) %>%
dplyr::rename(X = X, Y = adj) %>%
dplyr::summarise(estimate = cor.test(Y, X, method = "spearman", exact=FALSE)$estimate,
p.value = cor.test(Y, X, method = "spearman", exact=FALSE)$p.value)
# Collector: Join raw linear model to all adjusted models
cor_raw   = full_join(
x      = cor_raw,
y      = cor_adj %>% dplyr::select(-p.value),
by     = c(groups),
suffix = c("",paste("_",as.character(i),sep="")))
}
# Summarise iterated linear models as
cor_summary = cor_raw %>%
gather(iteration, estimate_n, contains("estimate_")) %>%
dplyr::group_by_(.dots = c(groups, "estimate", "p.value")) %>%
dplyr::summarise(est_iter_min  = min(estimate_n),
est_iter_q25  = quantile(estimate_n, .25),
est_iter_mean = mean(estimate_n),
est_iter_q75  = quantile(estimate_n, .75),
est_iter_max  = max(estimate_n)) %>%
dplyr::mutate(error_minus = abs(estimate-est_iter_q25),
error_plus = abs(estimate-est_iter_q75),
error_mean = mean(error_minus, error_plus)) %>%
dplyr::select(
-est_iter_min,
-est_iter_q25,
-est_iter_mean,
-est_iter_q75,
-est_iter_max,
-error_minus,
-error_plus)
filename = paste("5_Draft/Figures/", textName, "_", zone_exp, "_", n, "_", n_iterations, "_", format(x = now(), format = "%Y%m%d%H%M%S"), "_", Y, "_", X,".csv", sep = "")
write.csv(x = cor_summary, file = filename)
return(cor_summary)
}
# Copyright 2019 Province of British Columbia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
#### 2: CLEAN  ####
# Filter Elevation and Water Mask, Rename snow measurements, and group Z, asp, slp, and XY, also add unique ID
df = df %>%
filter(elev > 0 & watr_msk == 0) %>%
dplyr::rename(SD_ON = int_start) %>%
dplyr::rename(SD_OFF = int_end) %>%
dplyr::rename(SD_INT = intp_dur) %>%
# dplyr::rename(SD_SCI = sci) %>%
mutate(grZ   = as.numeric(as.character(cut(elev, seq(0, 5000, 500), labels = seq(0, 5000-500, 500)))),
grSlp = as.numeric(as.character(cut(slp, seq(0, 55, 5), labels = seq(0, 55-5, 5)))),
grN   = as.numeric(as.character(cut(n, seq(-1, 1, 0.2), labels = seq(-1, 1-0.2, 0.2)))),
grE   = as.numeric(as.character(cut(e, seq(-1, 1, 0.2), labels = seq(-1, 1-0.2, 0.2)))),
grLAT = as.numeric(as.character(cut(lat, seq(45, 60, 0.2), labels = seq(45, 60-0.2, 0.2)))),
grLON = as.numeric(as.character(cut(lon, seq(-150, -110, 0.2), labels = seq(-150, -110-0.2, 0.2)))),
UID = abs((lat*100) * (lon*100)))
# Optional code to change SD_ON and SD_OFF from "days since 1-Sep to Julian days
# SD_ON  = as.numeric(format(as.Date(paste(year, "-09-01", sep = ""))+SD_ON, "%j")),
# SD_OFF = as.numeric(format(as.Date(paste(year, "-09-01", sep = ""))+SD_OFF, "%j")))
# Counters
n_iterations = 1000
n = dim(df)[1]
ns = paste(n,n_iterations, sep="_")
#### 3: BCMAPS ####
# Load BC POLY
bc = as(st_geometry(get_layer("bc_bound", class = "sf")), "Spatial")
bc = transform_bc_albers(bc)
# Transform DF to SpatialPointsDataFrame and project as ALBERS
spdf = transform_bc_albers(SpatialPointsDataFrame(coords = df[,c("lon","lat")], data = df, proj4string = CRS("+init=epsg:4326")))
# Clip DF to BC
spdf = spdf[!is.na(over(spdf,bc)),]
# Load HYDROZONES
zones      = hydrozones()
zone_name  = "HYDROLOGICZONE_NAME"
zone_exp   = paste("HZ",ns, sep="_")
# Transform zones
zones_alb  = transform_bc_albers(as(zones, "Spatial"))
# Extract EcoregionCode by point
zones_sel <- over(spdf, zones_alb[,zone_name])
# flip back to DF
df = as.data.frame(spdf)
df = cbind(df, zones_sel)
df = df %>% dplyr::filter(!is.na(zone_name))
# CLEAN ENVIRONMENT
remove(zones_sel, spdf, zones_alb, bc)
#### 4: TELECONNECTIONS ####
# Conversions
tel_list = c("oni","pdo") #,"oni_plus_pdo") #,"oni_event","pdo_event","oni_event_plus_pdo_event","oni_event_plus_pdo_event_both")
tel_name = c("ONI","PDO") #,"ONI+PDO") #,"ONIe","PDOe","ONIe+PDOe","ONIe+PDOe_b")
# Conversions
msm_list = c("SD_ON","SD_OFF","SD_INT")#,"SD_SCI")
msm_name = c("SD[ON]","SD[OFF]","SD[DUR]")#,"SD[SCI]")
# Mean TEL by year
tel_by_year = tel %>%
dplyr::group_by(year) %>%
dplyr::select_(.dots = tel_list) %>%
dplyr::filter(year >= 2002) %>%
dplyr::summarise_all(mean, na.rm = T)
# Mean TEL by year, season
tel_by_seas = tel %>%
dplyr::group_by(year, season) %>%
dplyr::select_(.dots = tel_list) %>%
dplyr::filter(year >= 2002) %>%
dplyr::summarise_all(mean, na.rm = T)
# Order Seasons
tel_by_seas$season =
ordered(tel_by_seas$season, levels = c("Spring","Summer","Fall","Winter"))
# Summarise by zone
df_zone = df %>%
dplyr::group_by_(.dots = c(zone_name, "year")) %>%
dplyr::summarise(
SD_ON     = mean(SD_ON, na.rm = T),
SD_OFF    = mean(SD_OFF, na.rm = T),
SD_INT    = mean(SD_INT, na.rm = T),
# SD_SCI    = mean(SD_SCI, na.rm = T),
ELEV_MEAN = mean(elev, na.rm =T),
ELEV_STDV = sd(elev, na.rm =T))
# MERGE tel - AND - dfM - BY - year
tel_by_year_all   = merge(df, tel_by_year, by="year")
tel_by_year_zone  = merge(df_zone, tel_by_year, by="year")
# MERGE tel_seas - AND - dfM - BY - year
tel_by_seas_all   = merge(df, tel_by_seas, by=c("year"))
tel_by_seas_zone  = merge(df_zone, tel_by_seas, by="year")
# DFs to DATs
df_all_tel_m       = data.table(melt(df,               measure.vars = msm_list, variable.name = "measurement", value.name = "days"))
df_tel_year_all_m  = data.table(melt(tel_by_year_all,  measure.vars = msm_list, variable.name = "measurement", value.name = "days"))
df_tel_seas_all_m  = data.table(melt(tel_by_seas_all,  measure.vars = msm_list, variable.name = "measurement", value.name = "days"))
df_tel_year_zone_m = data.table(melt(tel_by_year_zone, measure.vars = msm_list, variable.name = "measurement", value.name = "days"))
df_tel_seas_zone_m = data.table(melt(tel_by_seas_zone, measure.vars = msm_list, variable.name = "measurement", value.name = "days"))
# ORDER FACTORS
df_all_tel_m$measurement       = ordered(df_all_tel_m$measurement, levels = msm_list, labels = msm_name)
df_tel_year_all_m$measurement  = ordered(df_tel_year_all_m$measurement, levels = msm_list, labels = msm_name)
df_tel_seas_all_m$measurement  = ordered(df_tel_seas_all_m$measurement, levels = msm_list, labels = msm_name)
df_tel_year_zone_m$measurement = ordered(df_tel_year_zone_m$measurement, levels = msm_list, labels = msm_name)
df_tel_seas_zone_m$measurement = ordered(df_tel_seas_zone_m$measurement, levels = msm_list, labels = msm_name)
# SUMMARISE MEAN VALUES PER YEAR
df_BC_year_mean  = df_tel_year_all_m %>%
group_by(year, measurement) %>%
select_(.dots = c("days", tel_list)) %>%
summarise_all(mean, na.rm = T) %>%
gather(key = tel, value = index, tel_list)
df_BC_year_mean$tel = ordered(df_BC_year_mean$tel, levels = tel_list, labels = tel_name)
# SUMMARISE MEAN VALUES PER YEAR+SEASON
df_BC_seas_mean = df_tel_seas_all_m %>%
group_by(year, measurement, season) %>%
select_(.dots =  c("days", tel_list)) %>%
summarise_all(mean, na.rm = T) %>%
gather(key = tel, value = index, tel_list)
df_BC_seas_mean$tel = ordered(df_BC_seas_mean$tel, levels = tel_list, labels = tel_name)
# ANNUAL ANALYSIS
mod_lm_BC_year_mean  = lm_iter(df_BC_year_mean, groups = c("measurement","tel"), Y = "days", X = "index", textName = "mod_lm_BC_year_mean")
mod_cor_BC_year_mean = cor_iter(df_BC_year_mean, groups = c("measurement","tel"), Y = "days", X = "index", textName = "mod_cor_BC_year_mean")
# SEASONAL ANALYSIS
mod_lm_BC_seas_mean  = lm_iter(df_BC_seas_mean, groups = c("measurement","tel","season"), Y = "days", X = "index", textName = "mod_lm_BC_seas_mean")
mod_cor_BC_seas_mean = cor_iter(df_BC_seas_mean, groups = c("measurement","tel","season"), Y = "days", X = "index", textName = "mod_cor_BC_seas_mean")
#### 6: CALC BY zone == LM AND COR (TEL/MSM) ####
# SUMMARISE MEAN VALUES PER YEAR
df_zone_year_mean = df_tel_year_zone_m %>%
group_by_(.dots = c("year", "measurement", zone_name)) %>%
summarise_all(mean, na.rm = T) %>%
gather(key = tel, value = index, tel_list)
df_zone_year_mean$tel = ordered(df_zone_year_mean$tel, levels = tel_list, labels = tel_name)
# SUMMARISE MEAN VALUES PER YEAR + SEASON
df_zone_seas_mean = df_tel_seas_zone_m %>%
group_by_(.dots = c("year", "season", "measurement", zone_name)) %>%
summarise_all(mean, na.rm = T) %>%
gather(key = tel, value = index, tel_list)
df_zone_seas_mean$tel = ordered(df_zone_seas_mean$tel, levels = tel_list, labels = tel_name)
# ANNUAL ANALYSIS
mod_lm_zone_year_mean = lm_iter(df_zone_year_mean, groups = c("measurement","tel",zone_name), Y = "days", X = "index", textName = "mod_lm_zone_year_mean")
mod_lm_zone_year_mean = merge(mod_lm_zone_year_mean, filter(df_zone_year_mean, year == 2002), by = c("measurement","tel",zone_name))
mod_cor_zone_year_mean = cor_iter(df_zone_year_mean, groups = c("measurement","tel",zone_name), Y = "days", X = "index", textName = "mod_cor_zone_year_mean")
mod_cor_zone_year_mean = merge(mod_cor_zone_year_mean, filter(df_zone_year_mean, year == 2002), by = c("measurement","tel",zone_name))
# SEASONAL ANALYSIS
mod_lm_zone_seas_mean  = lm_iter(df_zone_seas_mean, groups = c("measurement","tel","season",zone_name), Y = "days", X = "index", textName = "mod_lm_zone_seas_mean")
mod_lm_zone_seas_mean = merge(mod_lm_zone_seas_mean, filter(df_zone_seas_mean, year == 2002), by = c(zone_name, "measurement","tel","season"))
mod_cor_zone_seas_mean = cor_iter(df_zone_seas_mean, groups = c("measurement","tel","season",zone_name), Y = "days", X = "index", textName = "mod_cor_zone_seas_mean")
mod_cor_zone_seas_mean = merge(mod_cor_zone_seas_mean, filter(df_zone_seas_mean, year == 2002), by = c(zone_name, "measurement","tel","season"))
# Copyright 2019 Province of British Columbia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
# PLOT LM COEFFICIENTS
ggplot(mod_lm_BC_seas_mean, aes(group = season)) +
geom_vline(xintercept=c(1.5,2.5,3.5), linetype=2, color = "gray")+
geom_errorbar(aes(x = measurement, ymin = estimate - error_mean, ymax = estimate + error_mean), position = position_dodge(width=1)) +
geom_point(aes(x = measurement, y = estimate, fill = cut(p.value, breaks = c(-Inf, 0.05, Inf), labels = c("<=0.05", ">0.05")), shape = season, group = season), position=position_dodge(width=1), size = 3) +
geom_hline(yintercept = 0) +
scale_fill_manual(values = c("dark grey","white")) +
scale_shape_manual(values = c(21,22,23,24)) +
scale_x_discrete(labels = parse(text = levels(mod_lm_BC_seas_mean$measurement))) +
facet_wrap(~tel, ncol = 7) +
theme_few(base_size = 25) +
guides(fill = guide_legend(override.aes = list(shape=21, size = 3)), shape = guide_legend(override.aes = list(size = 3)))+
theme(aspect.ratio = 1.6) +
labs(x = "", y = expression(paste("Trend (d ?",C^-1,")", sep = "")), fill = "Significance", shape = "Season")
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "mod_lm_BC_seas_mean_", ns, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 12, height = 12, device = "pdf")
# PLOT COR COEFFICIENTS
ggplot(mod_cor_BC_seas_mean, aes(group = season)) +
geom_vline(xintercept=c(1.5,2.5,3.5), linetype=2, color = "gray")+
geom_errorbar(aes(x = measurement, ymin = estimate - error_mean, ymax = estimate + error_mean), position = position_dodge(width=1)) +
geom_point(aes(x = measurement, y = estimate, fill = cut(p.value, breaks = c(-Inf, 0.05, Inf), labels = c("<=0.05", ">0.05")), shape = season, group = season), position=position_dodge(width=1), size = 3) +
geom_hline(yintercept = 0) +
scale_fill_manual(values = c("dark grey","white")) +
scale_shape_manual(values = c(21,22,23,24)) +
scale_x_discrete(labels = parse(text = levels(mod_lm_BC_seas_mean$measurement))) +
facet_wrap(~tel, ncol = 7) +
theme_few(base_size = 20) +
guides(fill = guide_legend(override.aes = list(shape=21, size = 3)), shape = guide_legend(override.aes = list(size = 3)))+
theme(aspect.ratio = 1.6) +
labs(x = "", y = "Spearman Correlation Coefficient", fill = "Significance", shape = "Season")
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "mod_cor_BC_seas_mean_", ns, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 12, height = 12, device = "pdf")
#### 7: PLOT BY zone == LM AND COR (TEL/MSM) ####
# Colors
colors = c("black","darkred","white","dodgerblue4","dodgerblue")
# General plotting function
zone_plot = function(data) {
# data = mod_lm_zone_year_mean
sig = merge(zones, filter(data, p.value <= 0.05), by = zone_name)
not = merge(zones, filter(data, p.value > 0.05), by = zone_name)
max = max(sig$estimate)
min = min(sig$estimate)
# zone_no = cbind(data.frame(coordinates(as(sig, "Spatial"))), sig$p.value)
# names(zone_no) = c("x","y","sig")
ggplot() +
geom_sf(data = sig, aes(fill = estimate)) +
geom_sf(data = not, fill = "grey") +
# geom_point(data = zone_no, aes(x, y)) +
# geom_text_repel(data = zone_no,aes(x = x, y = y, label = no), size = 2) +
scale_fill_gradientn(colors=colors,
values=rescale(c(min,0,max)),
limits=c(min,max)) +
guides(fill = guide_colourbar(barwidth = 20, barheight = 1, direction = "horizontal", title.position = "top", frame.colour = "black", ticks.colour = "black")) +
theme_few(base_size = 15) +
theme(axis.text = element_blank(), axis.title = element_blank(), axis.ticks = element_blank(), aspect.ratio = 1, panel.grid = element_line(linetype = 3, color = "light gray"), legend.position = "bottom", legend.title.align = 0.5)}
# mod_lm_zone_year_mean
zone_plot(mod_lm_zone_year_mean) +
facet_grid(tel~measurement, labeller = labeller(measurement = label_parsed))   +
labs(title = "mod_lm_zone_year_mean", x = "", y = "", fill = expression(paste("Trend (d ?",C^-1,")", sep = "")))
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "mod_lm_zone_year_mean_", zone_exp, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 12, height = 12, device = "pdf")
# mod_lm_zone_seas_mean
zone_plot(mod_lm_zone_seas_mean) +
facet_grid(tel+season~measurement, labeller = labeller(measurement = label_parsed))   +
labs(title = "mod_lm_zone_seas_mean", x = "", y = "", fill = expression(paste("Trend (d ?",C^-1,")", sep = "")))
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "mod_lm_zone_seas_mean_", zone_exp, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 12, height = 18, device = "pdf")
# mod_cor_zone_year_mean
zone_plot(mod_cor_zone_year_mean) +
facet_grid(tel~measurement, labeller = labeller(measurement = label_parsed))   +
labs(title = "mod_cor_zone_year_mean", x = "", y = "", fill = "Spearman Correlation Coefficient")
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "mod_cor_zone_year_mean_", zone_exp, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 12, height = 12, device = "pdf")
# mod_cor_zone_seas_mean
zone_plot(mod_cor_zone_seas_mean) +
facet_grid(tel+season~measurement, labeller = labeller(measurement = label_parsed))   +
labs(title = "mod_cor_zone_seas_mean", x = "", y = "", fill = "Spearman Correlation Coefficient")
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "mod_cor_zone_seas_mean_", zone_exp, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 12, height = 18, device = "pdf")
#### 8: PLOT MOST IMPORTANT TEL FROM ANNUAL DATA ####
# From COR
most_imp_year_cor = mod_cor_zone_year_mean %>%
mutate(sig = p.value <= 0.05) %>%
group_by_(.dots = c(zone_name, "measurement")) %>%
filter(abs(estimate) == max(abs(estimate)))
ggplot() +
geom_sf(data = filter(merge(zones, most_imp_year_cor,by=zone_name), sig == T), aes(fill = tel)) +
geom_sf(data = filter(merge(zones, most_imp_year_cor,by=zone_name), sig == F), fill = "grey") +
facet_grid(~measurement, labeller = labeller(measurement = label_parsed)) +
theme_few(base_size = 15) +
theme(axis.text = element_blank(), axis.title = element_blank(), axis.ticks = element_blank(), aspect.ratio = 1, panel.grid = element_line(linetype = 3, color = "light gray")) +
labs(fill = "Season", title = "most_imp_year_cor")
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "most_imp_year_cor_", zone_exp, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 12, height = 12, device = "pdf")
# PLOT MOST IMPORTANT SEASON FROM SEASONAL DATA
# From COR
most_imp_seas_cor = mod_cor_zone_seas_mean %>%
mutate(sig = p.value <= 0.05) %>%
group_by_(.dots = c(zone_name, "measurement", "tel")) %>%
filter(abs(estimate) == max(abs(estimate)))
ggplot() +
geom_sf(data = filter(merge(zones,most_imp_seas_cor,by=zone_name), sig == T), aes(fill = season)) +
geom_sf(data = filter(merge(zones,most_imp_seas_cor,by=zone_name), sig == F), fill = "grey") +
facet_grid(tel~measurement, labeller = labeller(measurement = label_parsed)) +
theme_few(base_size = 15) +
theme(axis.text = element_blank(), axis.title = element_blank(), axis.ticks = element_blank(), aspect.ratio = 1, panel.grid = element_line(linetype = 3, color = "light gray")) +
labs(fill = "Season", title = "most_imp_seas_cor")
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "most_imp_seas_cor_", zone_exp, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 12, height = 12, device = "pdf")
df_raw = df_zone_year_mean
ts_tel_df_lm_original = df_raw  %>%
dplyr::group_by_(.dots = c(zone_name, "measurement")) %>%
do(broom::tidy(lm(days ~ year, data = .))) %>%
dplyr::filter(term == "year")
zone_plot(ts_tel_df_lm_original)  +
facet_grid(~measurement, labeller = labeller(measurement = label_parsed)) +
labs(title = "ts_seas_tel_df_lm_corrected", x = "", y = "", fill = expression(paste("Trend (d ",yr^-1,")", sep = "")))
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "raw_days_", zone_exp, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 15, height = 15, device = "pdf")
lm_raw = mod_lm_zone_year_mean %>% dplyr::select(-year, -ELEV_MEAN, -ELEV_STDV, -days, -index)
ts_tel_df = full_join(x = lm_raw, y = df_raw) %>% dplyr::mutate(days_corrected = days+(index*estimate))
ts_tel_df_lm_corrected = ts_tel_df %>%
dplyr::group_by_(.dots = c(zone_name, "measurement","tel")) %>%
do(broom::tidy(lm(days_corrected ~ year, data = ., na.action = na.omit))) %>%
dplyr::filter(term == "year");
zone_plot(ts_tel_df_lm_corrected)  +
facet_grid(tel~measurement, labeller = labeller(measurement = label_parsed)) +
labs(title = "ts_seas_tel_df_lm_corrected", x = "", y = "", fill = expression(paste("Trend (d ",yr^-1,")", sep = "")))
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "annual_adjusted_", zone_exp, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 15, height = 15, device = "pdf")
df_raw = df_zone_seas_mean
lm_raw = mod_lm_zone_seas_mean %>% dplyr::select(-year, -ELEV_MEAN, -ELEV_STDV, -days, -index)
ts_tel_df = full_join(x = lm_raw, y = df_raw) %>% dplyr::mutate(days_corrected = days+(index*estimate))
ts_tel_df_lm_corrected = ts_tel_df %>%
dplyr::group_by_(.dots = c(zone_name, "measurement","tel","season")) %>%
do(broom::tidy(lm(days_corrected ~ year, data = ., na.action = na.omit))) %>%
dplyr::filter(term == "year");
zone_plot(ts_tel_df_lm_corrected)  +
facet_grid(measurement~tel+season, labeller = labeller(measurement = label_parsed)) +
labs(title = "ts_seas_tel_df_lm_corrected", x = "", y = "", fill = expression(paste("Trend (d ",yr^-1,")", sep = "")))
ggsave(filename = paste(getwd(),"/5_Draft/Figures/", "season_adjusted_", zone_exp, "_", format(x = now(), format = "%Y%m%d%H%M%S.pdf"), sep = ""), width = 15, height = 15, device = "pdf")
